name: "PR Docker Build & Release"
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

env:
  APP_NAME: "472-be-cicd"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v4"

      - name: "Set up Go"
        uses: actions/setup-go@v5
        with:
          go-version: ${{ secrets.GO_VERSION }}

      - name: Debug Secrets
        run: |
          echo "DOCKERHUB_USERNAME is set: ${DOCKERHUB_USERNAME:+yes}"
          echo "DOCKERHUB_PASSWORD is set: ${DOCKERHUB_PASSWORD:+yes}"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: "Log in to Docker Hub"
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: "Get Current Version"
        id: get_version
        run: |
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="1.0.0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Current version: $VERSION"

      - name: "Determine Next Version"
        id: next_version
        run: |
          MAJOR=$(echo "${{ env.VERSION }}" | cut -d. -f1)
          MINOR=$(echo "${{ env.VERSION }}" | cut -d. -f2)
          PATCH=$(echo "${{ env.VERSION }}" | cut -d. -f3)

          if [[ "${{ github.event.pull_request.labels }}" =~ "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ github.event.pull_request.labels }}" =~ "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "$NEW_VERSION" > VERSION

      - name: "Commit Updated Version File"
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add VERSION
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push origin main

      - name: "Build and push container"
        run: |-
          IMAGE_TAG="v${{ env.NEW_VERSION }}"
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${IMAGE_TAG}"

          docker build -f docker/prod.Dockerfile -t "${IMAGE_NAME}" .
          docker push "${IMAGE_NAME}"

      - name: "Create GitHub Release"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Tag and Push Latest Version on Docker Hub"
        run: |
          LATEST_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest"

          docker tag "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:v${{ env.NEW_VERSION }}" "${LATEST_IMAGE}"
          docker push "${LATEST_IMAGE}"
